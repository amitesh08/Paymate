// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  balance   Int      @default(0)
  createdAt DateTime @default(now())

  passwordResetToken  String?
  passwordTokenExpiry DateTime?

  sentTxns         Transaction[]        @relation("Sender")
  receivedTxns     Transaction[]        @relation("Receiver")
  requestsSent     TransactionRequest[] @relation("RequestSender")
  requestsReceived TransactionRequest[] @relation("RequestReceiver")
}

model Transaction {
  id         String            @id @default(uuid())
  sender     User              @relation("Sender", fields: [senderId], references: [id])
  receiver   User              @relation("Receiver", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  amount     Int
  note       String?
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
}

model TransactionRequest {
  id         String        @id @default(uuid())
  sender     User          @relation("RequestSender", fields: [senderId], references: [id])
  receiver   User          @relation("RequestReceiver", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
  amount     Int
  note       String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}
